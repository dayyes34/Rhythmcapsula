// üìå –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú –£–°–¢–ê–ù–û–í–ò –ü–ê–ö–ï–¢–´
// npm install express cors axios uuid telegraf

const express = require("express");
const fs = require("fs");
const cors = require("cors");
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const { Telegraf } = require("telegraf");

const app = express();
const PORT = 3000;
app.use(express.json());
app.use(cors());

// üìå –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ Telegram –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
const BOT_TOKEN = "8188912825:AAEEq8lTj3R_a0lx6OKPyt59Nc_jv04GRxs";
const ADMIN_CHAT_ID = "6533586308"; // <-- –ø–æ–ø—Ä–∞–≤—å —ç—Ç–æ –ø–æ—Å–ª–µ —à–∞–≥–∞ –Ω–∏–∂–µ

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const BOOKINGS_FILE = "./bookings.json";
const PENDING_FILE = "./pending_bookings.json";

// –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
function loadBookings() {
    if (fs.existsSync(BOOKINGS_FILE))
        return JSON.parse(fs.readFileSync(BOOKINGS_FILE));
    return {};
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
function saveBookings(bookings) {
    fs.writeFileSync(BOOKINGS_FILE, JSON.stringify(bookings, null, 2));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
function loadPending() {
    return fs.existsSync(PENDING_FILE) ? JSON.parse(fs.readFileSync(PENDING_FILE)) : [];
}
function savePending(pending) {
    fs.writeFileSync(PENDING_FILE, JSON.stringify(pending, null, 2));
}

// üö© API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
// –≠—Ç–æ—Ç endpoint –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
app.get('/api/bookings', (req, res) => {
    const bookings = loadBookings();
    res.json(bookings);
 });
 
 // –ù–æ–≤—ã–π endpoint —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:
 app.get('/api/booked-slots', (req, res) => {
   const bookings = loadBookings();
   let result = {};
   bookings.forEach(booking => {
     if (!result[booking.date]) result[booking.date] = [];
     result[booking.date].push(...booking.hours);
   });
   res.json(result);
 });
 

// üö© API: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
app.post('/api/bookings', (req, res) => {
    const { date, hours, customer, username, totalprice, chat_id } = req.body;
  
    if (!chat_id) {
      return res.status(400).json({status: "ERROR", message: "–ù–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω chat_id –∫–ª–∏–µ–Ω—Ç–∞"});
    }
  
    const pending = loadPending();
  
    const id = (pending.length ? Math.max(...pending.map(b => b.id)) + 1 : 1);
  
    const newBooking = { id, date, hours, customer, username, chat_id, totalprice };
  
    pending.push(newBooking);
    savePending(pending);
  
    notifyAdmin(newBooking);
    notifyCustomer(newBooking);
  
    res.json({status: "OK", bookingId: id});
  });
  

    // –ù–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π ID (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    const id = pending.length ? Math.max(...pending.map(b => b.id)) + 1 : 1; 

    const newBooking = {id, date, hours, customer, username, total_price};

    pending.push(newBooking);
    savePending(pending);

    notifyAdmin(newBooking);
    notifyCustomer(newBooking);

    res.json({status: "OK", bookingId: id});
});


// üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
function notifyAdmin({id, date, hours, customer, username, total_price}) {
    const txt = `üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${id}\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(", ")}\n–ö–ª–∏–µ–Ω—Ç: ${customer}\nUsername: @${username}\n–°—É–º–º–∞: ${total_price}—Ä—É–±.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n/approve ${id}\n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π:\n/cancel ${id}`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: ADMIN_CHAT_ID,
        text: txt
    })
    .then(() => console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"))
    .catch(console.error);
}

// üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
function notifyCustomer({chat_id, date, hours, totalprice}) {
    const txt = `–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(", ")}\n–ö –æ–ø–ª–∞—Ç–µ: ${totalprice} —Ä—É–±\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Ç–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id, // –≤–æ—Ç —Å—é–¥–∞ chat_id, –∞ –Ω–µ username!
        text: txt
    })
    .then(() => console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"))
    .catch(() => console.log("‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç)"));
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
function notifyApprovedCustomer({chat_id, date, hours}, bookingId) {
    const txt = `üéâ‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${bookingId}\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(", ")}`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id,
        text: txt
    })
    .then(() => console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', err));
}



// üî∑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
const bot = new Telegraf(BOT_TOKEN);

bot.start(ctx => {
    const chat_id = ctx.chat.id;
    const username = ctx.from.username;
  
    const users = loadUsers(); // –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
  
    users[username] = chat_id; // –ø—Ä–∏–≤—è–∑–∞–ª–∏ username –∫ chat_id
    saveUsers(users);
  
    ctx.reply(`–í–∞—à chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.`);
  });
  

// ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
bot.command("approve", ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!");
    }

    const id = Number(ctx.message.text.split(" ")[1]); 
    let pending = loadPending();
    const booking = pending.find(b => b.id === id);
    if (!booking) return ctx.reply("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");

    let bookings = loadBookings();

    // –ù–æ–≤—ã–π id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏
    const bookingId = bookings.length
        ? Math.max(...bookings.map(b => b.id)) + 1
        : 1;

    bookings.push({
        id: bookingId,
        date: booking.date,
        hours: booking.hours,
        customer: booking.customer,
        username: booking.username,
        total_price: booking.total_price
    });

    saveBookings(bookings);
    savePending(pending.filter(b => b.id !== id));

    notifyApprovedCustomer(booking, bookingId);
    ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${bookingId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`);
});

// ‚ùå –û–¢–ú–ï–ù–ê
bot.command('cancel', ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!');
    }

    const id = Number(ctx.message.text.split(' ')[1]);
    let pending = loadPending();
    const booking = pending.find(b => b.id === id);

    if (booking) {
        pending = pending.filter(b => b.id !== id);
        savePending(pending);
        ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏).`);
        return;
    }

    const bookings = loadBookings();
    let found = false;

    for (let date in bookings) {
        if (bookings[date].length) {
            const initialHours = bookings[date].length;
            bookings[date] = bookings[date].filter(hour => !booking?.hours.includes(hour));
            if (bookings[date].length < initialHours) {
                found = true;
                saveBookings(bookings);
                break;
            }
        }
    }

    found
        ? ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞).`)
        : ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
});


// –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
function notifyApprovedCustomer(booking, bookingId) {
    const txt = `üéâ‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${bookingId}\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.hours.join(", ")}`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: booking.username,
        text: txt
    })
    .then(() => console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É:', err));
}

bot.command('remove', ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!');
    }

    const id = Number(ctx.message.text.split(' ')[1]);
    let bookings = loadBookings();
    const booking = bookings.find(b => b.id === id);

    if (!booking) return ctx.reply(`‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);

    bookings = bookings.filter(b => b.id !== id);
    saveBookings(bookings);

    ctx.reply(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #${id} —É–¥–∞–ª–µ–Ω–∞.`);
});
// ‚ùóÔ∏è –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.use(Telegraf.log());

// üöÄ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –¥–ª—è –±–æ—Ç–∞
app.use(bot.webhookCallback('/api/bot'));  // –ø—É—Ç—å –¥–ª—è webhook –±—É–¥–µ—Ç –≤–∞—à_–¥–æ–º–µ–Ω.ru/bot

// –ó–∞–ø—É—Å—Ç–∏—Ç–µ express —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
    console.log(`üöÄ App running on port ${PORT}`);

    // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook –≤ Telegram —è–≤–Ω–æ
    const webhookUrl = 'https://drumfitness.ru/api/bot'; // üëà –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –≤–∞—à HTTPS-–¥–æ–º–µ–Ω
    bot.telegram.setWebhook(webhookUrl)
        .then(() => console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl))
        .catch(err => console.error('‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', err));
});
