const express = require('express');
const bodyParser = require('body-parser');
const { Telegraf } = require('telegraf');
const fs = require('fs');
const cors = require('cors');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  botToken: '8188912825:AAEEq8lTj3R_a0lx6OKPyt59Nc_jv04GRxs',
  adminChatId: '6533586308', // ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  port: process.env.PORT || 3000,
  webhookDomain: 'https://drumfitness.ru' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –∏ Telegram –±–æ—Ç–∞
const app = express();
const bot = new Telegraf(config.botToken);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const BOOKINGS_FILE = "./bookings.json";
const PENDING_FILE = "./pending_bookings.json";
const USERS_FILE = "./users.json";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
function initDataFile(filePath, defaultData = {}) {
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, JSON.stringify(defaultData));
    console.log(`Created file: ${filePath}`);
  }
}

initDataFile(PENDING_FILE, { room1: {}, room2: {} });
initDataFile(BOOKINGS_FILE, { room1: {}, room2: {} });
initDataFile(USERS_FILE, {});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
function readDataFile(filePath) {
  try {
    const data = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error(`Error reading file ${filePath}:`, error);
    return {};
  }
}

function writeDataFile(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    return true;
  } catch (error) {
    console.error(`Error writing file ${filePath}:`, error);
    return false;
  }
}

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
app.get('/api/booked-slots', (req, res) => {
  const room = req.query.room || 'room1';

  try {
    const pendingBookings = readDataFile(PENDING_FILE);
    const confirmedBookings = readDataFile(BOOKINGS_FILE);

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    const booked = {};

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    for (const date in confirmedBookings[room]) {
      if (!booked[date]) booked[date] = [];

      for (const booking of confirmedBookings[room][date]) {
        booking.hours.forEach(hour => {
          if (!booked[date].includes(hour)) {
            booked[date].push(hour);
          }
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    for (const date in pendingBookings[room]) {
      if (!booked[date]) booked[date] = [];

      for (const booking of pendingBookings[room][date]) {
        booking.hours.forEach(hour => {
          if (!booked[date].includes(hour)) {
            booked[date].push(hour);
          }
        });
      }
    }

    res.json(booked);
    console.log(`Sent booked slots for ${room}`);
  } catch (error) {
    console.error('Error getting booked slots:', error);
    res.status(500).json({ status: 'ERROR', message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
app.post('/api/bookings', async (req, res) => {
    try {
      const { date, hours, customer, username, room = 'room1', total_price } = req.body;
  
      if (!date || !hours || !hours.length) {
        return res.status(400).json({ status: 'ERROR', message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' });
      }
  
      console.log(`New booking request: ${date}, ${room}, ${hours.join(',')}, ${customer}`);
  
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const pendingBookings = readDataFile(PENDING_FILE);
      const confirmedBookings = readDataFile(BOOKINGS_FILE);
      const users = readDataFile(USERS_FILE);
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
      const isSlotAvailable = (date, hour, room) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (confirmedBookings[room] && confirmedBookings[room][date]) {
          for (const booking of confirmedBookings[room][date]) {
            if (booking.hours.includes(hour)) {
              return false;
            }
          }
        }
  
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (pendingBookings[room] && pendingBookings[room][date]) {
          for (const booking of pendingBookings[room][date]) {
            if (booking.hours.includes(hour)) {
              return false;
            }
          }
        }
  
        return true;
      };
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      for (const hour of hours) {
        if (!isSlotAvailable(date, hour, room)) {
          console.log(`Slot ${date} ${hour}:00 already booked`);
          return res.status(409).json({ 
            status: 'ERROR', 
            message: `–ß–∞—Å ${hour}:00 —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω` 
          });
        }
      }
  
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –∏ –¥–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!pendingBookings[room]) {
        pendingBookings[room] = {};
      }
  
      if (!pendingBookings[room][date]) {
        pendingBookings[room][date] = [];
      }
  
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
const bookingId = Date.now().toString();
const chatId = users[username]?.chatId;

const newBooking = {
  id: bookingId,
  date,
  hours,
  customer,
  username,
  chatId,
  total_price,
  room, // –í–∞–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç
  createdAt: new Date().toISOString()
};

// –í–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
pendingBookings[room][date].push(newBooking);
writeDataFile(PENDING_FILE, pendingBookings);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
const saved = writeDataFile(PENDING_FILE, pendingBookings);
console.log('Created new pending booking', bookingId, 'saved:', saved);
  



    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const roomName = room === 'room1' ? '–ö–∞–ø—Å—É–ª–∞ üîµ' : '–ö–∞–ø—Å—É–ª–∞ üî¥ ';
    const adminMsg = `üÜï –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n` +
                     `üë§ –ö–ª–∏–µ–Ω—Ç: ${customer}\n` +
                     `üìÖ –î–∞—Ç–∞: ${date}\n` +
                     `üïí –í—Ä–µ–º—è: ${hours.map(h => `${h}:00`).join(', ')}\n` +
                     `ü•Å –î—Ä–∞–º-–†—É–º: ${roomName}\n` +
                     `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${total_price} ‚ÇΩ\n\n` +
                     `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n` +
                     `/confirm_${bookingId}\n\n` +
                     `–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n` +
                     `/cancel_${bookingId} –ü—Ä–∏—á–∏–Ω–∞`;

    try {
      await bot.telegram.sendMessage(config.adminChatId, adminMsg);
      console.log(`Notification sent to admin (${config.adminChatId})`);
    } catch (telegramError) {
      console.error('Error sending message to admin:', telegramError);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ–≥–æ chatId
    if (chatId) {
      const userMsg = `üéØ –í–∞—à–∞ –±—Ä–æ–Ω—å –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n` +
                      `üìÖ –î–∞—Ç–∞: ${date}\n` +
                      `üïí –í—Ä–µ–º—è: ${hours.map(h => `${h}:00`).join(', ')}\n` +
                      `ü•Å –î—Ä–∞–º-–†—É–º: ${roomName}\n` +
                      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${total_price} ‚ÇΩ\n\n` +
                      `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`;

      try {
        await bot.telegram.sendMessage(chatId, userMsg);
        console.log(`Notification sent to user (${chatId})`);
      } catch (telegramError) {
        console.error('Error sending message to user:', telegramError);
      }
    }

    res.json({ status: 'OK', bookingId });
  } catch (error) {
    console.error('Error creating booking:', error);
    res.status(500).json({ status: 'ERROR', message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

// –ö–æ–º–∞–Ω–¥–∞ /start - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
bot.start(async (ctx) => {
  try {
    const users = readDataFile(USERS_FILE);
    const user = ctx.from;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    users[user.username || user.id] = {
      chatId: ctx.chat.id,
      firstName: user.first_name,
      lastName: user.last_name,
      username: user.username,
      registeredAt: new Date().toISOString()
    };

    writeDataFile(USERS_FILE, users);
    console.log(`User registered: ${user.username || user.id}, chat_id: ${ctx.chat.id}`);

    await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –†–∏—Ç–º –ö–∞–ø—Å—É–ª—ã.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "ü•Å –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–º-—Ä—É–º", web_app: { url: "https://drumfitness.ru" } }]
        ]
      }
    });
  } catch (error) {
    console.error('Error in start command:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /confirm_<bookingId> - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
bot.hears(/\/confirm_(.+)/, async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (ctx.chat.id.toString() !== config.adminChatId) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    const bookingId = ctx.match[1];
    if (!bookingId) {
      return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /confirm_1234567890');
    }


    console.log(`Admin attempting to confirm booking: ${bookingId}`);

    // –ò—â–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö
    const pendingBookings = readDataFile(PENDING_FILE);
    const confirmedBookings = readDataFile(BOOKINGS_FILE);


// –ü–æ–∏—Å–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID
let foundBooking = null;
let foundRoom = null;
let foundDate = null;

// –ò—â–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
for (const room in pendingBookings) {
  for (const date in pendingBookings[room]) {
    const index = pendingBookings[room][date].findIndex(
      booking => booking.id === parseInt(bookingId) || booking.id === bookingId
    );

    if (index !== -1) {
      foundBooking = pendingBookings[room][date][index];
      foundRoom = room;
      foundDate = date;

      // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
      pendingBookings[room][date].splice(index, 1);
      break;
    }
  }
  if (foundBooking) break;
}

if (!foundBooking) {
  console.log(`Booking ${bookingId} not found`);
  return ctx.reply(`–ë—Ä–æ–Ω—å —Å ID ${bookingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
}

// –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –∏ –¥–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!confirmedBookings[foundRoom]) {
  confirmedBookings[foundRoom] = {};
}

if (!confirmedBookings[foundRoom][foundDate]) {
  confirmedBookings[foundRoom][foundDate] = [];
}

// –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö
foundBooking.confirmedAt = new Date().toISOString();
confirmedBookings[foundRoom][foundDate].push(foundBooking);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
writeDataFile(PENDING_FILE, pendingBookings);
writeDataFile(BOOKINGS_FILE, confirmedBookings);

console.log(`Booking ${bookingId} confirmed successfully`);

    const roomName = foundRoom === 'room1' ? '–ó–∞–ª 1' : '–ó–∞–ª 2';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    ctx.reply(`‚òëÔ∏è –ë—Ä–æ–Ω—å #${bookingId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ–≥–æ chatId
    if (foundBooking.chatId) {
      const userMsg = `‚òëÔ∏è –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n` +
                     `üìÖ –î–∞—Ç–∞: ${foundBooking.date}\n` +
                     `üïí –í—Ä–µ–º—è: ${foundBooking.hours.map(h => `${h}:00`).join(', ')}\n` +
                     `ü•Å –î—Ä–∞–º-—Ä—É–º: ${roomName}\n` +
                     `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${foundBooking.total_price} ‚ÇΩ\n\n` +
                     `–ñ–¥—ë–º –≤–∞—Å! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏`;

      try {
        await bot.telegram.sendMessage(foundBooking.chatId, userMsg);
        console.log(`Confirmation notification sent to user (${foundBooking.chatId})`);
      } catch (telegramError) {
        console.error('Error sending confirmation to user:', telegramError);
      }
    }
  } catch (error) {
    console.error('Error in confirm command:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel <bookingId> [–ø—Ä–∏—á–∏–Ω–∞] - –æ—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
bot.hears(/\/cancel_(.+?)(?:\s+(.+))?$/, async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (ctx.chat.id.toString() !== config.adminChatId) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const bookingId = ctx.match[1];
    const reason = ctx.match[2] || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

    if (!bookingId) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –±—Ä–æ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /cancel_1234567890 –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã');
    }


    console.log(`Admin attempting to cancel booking: ${bookingId}`);

    // –ò—â–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö
    const pendingBookings = readDataFile(PENDING_FILE);

    let foundBooking = null;
    let foundRoom = null;
    let foundDate = null;

    // –ü–æ–∏—Å–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID
    for (const room in pendingBookings) {
      for (const date in pendingBookings[room]) {
        const index = pendingBookings[room][date].findIndex(booking => booking.id === bookingId);
        if (index !== -1) {
          foundBooking = pendingBookings[room][date][index];
          foundRoom = room;
          foundDate = date;

          // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
          pendingBookings[room][date].splice(index, 1);
          break;
        }
      }
      if (foundBooking) break;
    }

    if (!foundBooking) {
      console.log(`Booking ${bookingId} not found for cancellation`);
      return ctx.reply(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID ${bookingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    writeDataFile(PENDING_FILE, pendingBookings);

    console.log(`Booking ${bookingId} cancelled successfully`);

    const roomName = foundRoom === 'room1' ? '–ö–∞–ø—Å—É–ª–∞ üîµ' : '–ö–∞–ø—Å—É–ª–∞ üî¥ ';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    ctx.reply(`‚ùå –ë—Ä–æ–Ω—å #${bookingId} –æ—Ç–º–µ–Ω–µ–Ω–∞`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ–≥–æ chatId
    if (foundBooking.chatId) {
      const userMsg = `‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n` +
                     `üìÖ –î–∞—Ç–∞: ${foundBooking.date}\n` +
                     `üïí –í—Ä–µ–º—è: ${foundBooking.hours.map(h => `${h}:00`).join(', ')}\n` +
                     `ü•Å –î—Ä–∞–º-–†—É–º: ${roomName}\n\n` +
                     `ü§î –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n` +
                     `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏`;

      try {
        await bot.telegram.sendMessage(foundBooking.chatId, userMsg);
        console.log(`Cancellation notification sent to user (${foundBooking.chatId})`);
      } catch (telegramError) {
        console.error('Error sending cancellation to user:', telegramError);
      }
    }
  } catch (error) {
    console.error('Error in cancel command:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
  }
});
// –ö–æ–º–∞–Ω–¥–∞ /listconfirmed - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
bot.command('bookings', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (ctx.chat.id.toString() !== config.adminChatId) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const confirmedBookings = readDataFile(BOOKINGS_FILE);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = 'üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n';
    let bookingsFound = false;

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–æ–º–Ω–∞—Ç–∞–º –∏ –¥–∞—Ç–∞–º
    for (const room in confirmedBookings) {
      for (const date in confirmedBookings[room]) {
        const bookings = confirmedBookings[room][date];

        if (bookings && bookings.length > 0) {
          message += `*–ö–æ–º–Ω–∞—Ç–∞ ${room}, ${date}:*\n`;

          bookings.forEach(booking => {
            const hours = booking.hours.join(', ');
            message += `ID: ${booking.id} | –ß–∞—Å—ã: ${hours} | –ö–ª–∏–µ–Ω—Ç: ${booking.customer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
            message += `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${new Date(booking.confirmedAt).toLocaleString('ru-RU')}\n\n`;
          });

          bookingsFound = true;
        }
      }
    }

    if (!bookingsFound) {
      message = '–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.';
    }

    return ctx.replyWithMarkdown(message);
  } catch (error) {
    console.error('Error listing confirmed bookings:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /deleteconfirmed_<bookingId> - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
bot.hears(/\/delete_(\d+)/, async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (ctx.chat.id.toString() !== config.adminChatId) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    if (!ctx.match[1]) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete_1234567890');
    }
    const bookingId = ctx.match[1]; // –±–µ–∑ parseInt - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const confirmedBookings = readDataFile(BOOKINGS_FILE);

    // –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    let bookingFound = false;
    let roomInfo = '';
    let dateInfo = '';

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–æ–º–Ω–∞—Ç–∞–º –∏ –¥–∞—Ç–∞–º
    for (const room in confirmedBookings) {
      for (const date in confirmedBookings[room]) {
        const bookingIndex = confirmedBookings[room][date].findIndex(booking => String(booking.id) === bookingId);

        if (bookingIndex !== -1) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
          const booking = confirmedBookings[room][date][bookingIndex];
          roomInfo = room;
          dateInfo = date;
          const hours = booking.hours.join(', ');

          // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
          confirmedBookings[room][date].splice(bookingIndex, 1);
          bookingFound = true;

           // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
           writeDataFile(BOOKINGS_FILE, confirmedBookings);

           return ctx.reply(
             `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:
 ID: ${bookingId}
 –ö–æ–º–Ω–∞—Ç–∞: ${roomInfo}
 –î–∞—Ç–∞: ${dateInfo}
 –ß–∞—Å—ã: ${hours}
 –ö–ª–∏–µ–Ω—Ç: ${booking.customer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`
           );
        }
      }
    }

    if (!bookingFound) {
      return ctx.reply(`‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID ${bookingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    }

  } catch (error) {
    console.error('Error deleting confirmed booking:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /list - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
bot.command('list', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (ctx.chat.id.toString() !== config.adminChatId) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    console.log('Admin requested pending bookings list');

    const pendingBookings = readDataFile(PENDING_FILE);

    let message = 'üìã –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n\n';
    let hasBookings = false;

    for (const room in pendingBookings) {
      for (const date in pendingBookings[room]) {
        for (const booking of pendingBookings[room][date]) {
          hasBookings = true;
          message += `üÜî ${booking.id}\n` +
                     `üë§ –ö–ª–∏–µ–Ω—Ç: ${booking.customer}\n` +
                     `üìÖ –î–∞—Ç–∞: ${booking.date}\n` +
                     `üïí –í—Ä–µ–º—è: ${booking.hours.map(h => `${h}:00`).join(', ')}\n` +
                     `üè† –î—Ä–∞–º-–†—É–º: ${room === 'room1' ? 'üîµ' : 'üî¥'}\n` +
                     `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.total_price} ‚ÇΩ\n` +
                     `‚è± –°–æ–∑–¥–∞–Ω–æ: ${new Date(booking.createdAt).toLocaleString()}\n\n`;
        }
      }
    }

    if (!hasBookings) {
      message = 'üìÇ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.';
    }

    await ctx.reply(message);
  } catch (error) {
    console.error('Error in list command:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
bot.command('help', (ctx) => {
  const isAdmin = ctx.chat.id.toString() === config.adminChatId;
  let message = 'üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n';

  message += '/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n';

  if (isAdmin) {
    message += '\nüîê –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n' +
              '/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n' +
              '/confirm_ID - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n' +
              '/bookings - –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n' +
              '/delete_ID - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n' +
              '/cancel_ID –ø—Ä–∏—á–∏–Ω–∞ - –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n';
  }

  ctx.reply(message);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞
const WEBHOOK_PATH = '/webhook/' + config.botToken;
const WEBHOOK_URL = config.webhookDomain + WEBHOOK_PATH;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(config.port, async () => {
  console.log(`Server is running on port ${config.port}`);

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log('Webhook set successfully to:', WEBHOOK_URL);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ webhook
    const webhookInfo = await bot.telegram.getWebhookInfo();
    console.log('Webhook info:', webhookInfo);
  } catch (error) {
    console.error('Error setting webhook:', error);
    console.log('Falling back to polling mode...');

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch().then(() => {
      console.log('Bot started in polling mode');
    }).catch(err => {
      console.error('Failed to start bot in polling mode:', err);
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.once('SIGINT', () => {
  bot.stop('SIGINT');
  console.log('Bot stopped due to SIGINT');
  process.exit(0);
});

process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  console.log('Bot stopped due to SIGTERM');
  process.exit(0);
});