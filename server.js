const express = require('express');
const fs = require('fs');
const cors = require('cors');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const { Telegraf } = require('telegraf');

const app = express();
const PORT = 3000;
app.use(express.json());
app.use(cors());

// –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ Telegram –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
const BOT_TOKEN = '8188912825AAEEq8lTj3Ra0lx6OKPyt59Ncjv04GRxs';
const ADMIN_CHAT_ID = '6533586308'; // –ø–æ–ø—Ä–∞–≤—å —ç—Ç–æ –ø–æ—Å–ª–µ —à–∞–≥–∞ –Ω–∏–∂–µ

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º)
const BOOKINGS_FILE = 'bookings.json';
const PENDING_FILE = 'pending-bookings.json';

// –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
function loadBookings() {
    if (fs.existsSync(BOOKINGS_FILE)) {
        return JSON.parse(fs.readFileSync(BOOKINGS_FILE));
    }
    return { drum: [], fitness: [] }; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –¥–≤—É–º—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
function saveBookings(bookings) {
    fs.writeFileSync(BOOKINGS_FILE, JSON.stringify(bookings, null, 2));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
function loadPending() {
    return fs.existsSync(PENDING_FILE) ? JSON.parse(fs.readFileSync(PENDING_FILE)) : [];
}

function savePending(pending) {
    fs.writeFileSync(PENDING_FILE, JSON.stringify(pending, null, 2));
}

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
app.get('/api/bookings', (req, res) => {
    const bookings = loadBookings();
    res.json(bookings);
});

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ
app.get('/api/booked-slots', (req, res) => {
    const { room = 'drum' } = req.query; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é drum, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    const bookings = loadBookings();

    // –í—ã–±–∏—Ä–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    const roomBookings = bookings[room] || [];

    let result = {};
    roomBookings.forEach(booking => {
        if (!result[booking.date]) result[booking.date] = [];
        booking.hours.forEach(hour => {
            if (!result[booking.date].includes(hour)) {
                result[booking.date].push(hour);
            }
        });
    });

    res.json(result);
});

// API: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
app.post('/api/bookings', (req, res) => {
    const { date, hours, customer, username, room = 'drum', totalprice } = req.body;
    const pending = loadPending();

    // –ù–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π ID (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    const id = pending.length ? Math.max(...pending.map(b => b.id)) + 1 : 1;

    // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    const newBooking = { id, date, hours, customer, username, room, totalprice };

    pending.push(newBooking);
    savePending(pending);

    notifyAdmin(newBooking);
    notifyCustomer(newBooking);

    res.json({ status: 'OK', bookingId: id });
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
function notifyAdmin({ id, date, hours, customer, username, room, totalprice }) {
    const roomText = room === 'drum' ? '–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞' : '–§–∏—Ç–Ω–µ—Å –∑–∞–ª';
    const txt = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${id}\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(', ')}\n–ö–æ–º–Ω–∞—Ç–∞: ${roomText}\n–ö–ª–∏–µ–Ω—Ç: ${customer}\nUsername: ${username}\n–°—É–º–º–∞: ${totalprice}—Ä—É–±\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n/approve ${id}\n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π:\n/cancel ${id}`;

    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: ADMIN_CHAT_ID,
        text: txt
    })
    .then(() => console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
    .catch(console.error);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
function notifyCustomer({ username, date, hours, room, totalprice }) {
    const bookings = loadBookings();
    const userInfo = bookings[username];
    const chatId = userInfo ? userInfo.chatId : null;

    if (!chatId) {
        console.log(`–ù–µ—Ç chatId –¥–ª—è ${username}. –ü—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start`);
        return;
    }

    const roomText = room === 'drum' ? '–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞' : '–§–∏—Ç–Ω–µ—Å –∑–∞–ª';
    const txt = `üîî –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(', ')}\n–ö–æ–º–Ω–∞—Ç–∞: ${roomText}\n–ö –æ–ø–ª–∞—Ç–µ: ${totalprice} —Ä—É–±\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Ç–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`;

    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: chatId,
        text: txt
    })
    .then(() => console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É', err));
}

function notifyApprovedCustomer(booking) {
    const bookings = loadBookings();
    const userInfo = bookings[booking.username];
    const chatId = userInfo ? userInfo.chatId : null;

    if (!chatId) {
        console.log(`–ù–µ—Ç chatId –¥–ª—è ${booking.username}. –ü—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start`);
        return;
    }

    const roomText = booking.room === 'drum' ? '–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞' : '–§–∏—Ç–Ω–µ—Å –∑–∞–ª';
    const txt = `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: ${booking.id}\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.hours.join(', ')}\n–ö–æ–º–Ω–∞—Ç–∞: ${roomText}`;

    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: chatId,
        text: txt
    })
    .then(() => console.log('–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É', err));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
const bot = new Telegraf(BOT_TOKEN);

bot.start(ctx => {
    const username = ctx.from.username;
    const chatId = ctx.chat.id;

    let bookings = loadBookings();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (!bookings.users) bookings.users = {};
    bookings.users[username] = { chatId };

    saveBookings(bookings);

    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í–∞—à chatId —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
bot.command('approve', ctx => {
    if (String(ctx.message.chat.id) !== String(ADMIN_CHAT_ID)) {
        return ctx.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω');
    }

    const id = Number(ctx.message.text.split(' ')[1]);
    let pending = loadPending();
    const booking = pending.find(b => b.id === id);

    if (!booking) return ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    let bookings = loadBookings();

    // –°–æ–∑–¥–∞–¥–∏–º –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!bookings[booking.room]) bookings[booking.room] = [];

    // –ù–æ–≤—ã–π id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏
    const bookingId = bookings[booking.room].length ? 
        Math.max(...bookings[booking.room].map(b => b.id)) + 1 : 1;

    // –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É
    bookings[booking.room].push({
        id: bookingId,
        date: booking.date,
        hours: booking.hours,
        customer: booking.customer,
        username: booking.username,
        totalprice: booking.totalprice
    });

    saveBookings(bookings);
    savePending(pending.filter(b => b.id !== id));

    notifyApprovedCustomer(booking);
    ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${bookingId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ ${booking.room === 'drum' ? '–±–∞—Ä–∞–±–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ' : '—Ñ–∏—Ç–Ω–µ—Å –∑–∞–ª–µ'}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
bot.command('cancel', ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω');
    }

    const id = Number(ctx.message.text.split(' ')[1]);
    let pending = loadPending();
    const booking = pending.find(b => b.id === id);

    if (booking) {
        pending = pending.filter(b => b.id !== id);
        savePending(pending);
        ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏)`);
        return;
    }

    const bookings = loadBookings();
    let found = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –∫–æ–º–Ω–∞—Ç—ã
    ['drum', 'fitness'].forEach(room => {
        if (bookings[room] && bookings[room].length) {
            const bookingIndex = bookings[room].findIndex(b => b.id === id);
            if (bookingIndex !== -1) {
                bookings[room].splice(bookingIndex, 1);
                found = true;
                saveBookings(bookings);
            }
        }
    });

    found ? 
        ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞)`) : 
        ctx.reply(`‚ùì –ó–∞—è–≤–∫–∞ #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
bot.command('remove', ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω');
    }

    const id = Number(ctx.message.text.split(' ')[1]);
    let bookings = loadBookings();
    let found = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –∫–æ–º–Ω–∞—Ç—ã
    ['drum', 'fitness'].forEach(room => {
        if (bookings[room]) {
            const bookingIndex = bookings[room].findIndex(b => b.id === id);
            if (bookingIndex !== -1) {
                bookings[room].splice(bookingIndex, 1);
                found = true;
            }
        }
    });

    if (!found) return ctx.reply(`‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

    saveBookings(bookings);
    ctx.reply(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #${id} —É–¥–∞–ª–µ–Ω–∞.`);
});

// –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.use(Telegraf.log());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
app.use(bot.webhookCallback('/api/bot'));  // –ø—É—Ç—å –¥–ª—è webhook –±—É–¥–µ—Ç –≤–∞—à_–¥–æ–º–µ–Ω.ru/bot

// –ó–∞–ø—É—Å–∫ express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ App running on port ${PORT}`);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –≤ Telegram
    const webhookUrl = 'https://drumfitness.ru/api/bot'; // –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –≤–∞—à HTTPS-–¥–æ–º–µ–Ω
    bot.telegram.setWebhook(webhookUrl)
        .then(() => console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl))
        .catch(err => console.error('‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', err));
});