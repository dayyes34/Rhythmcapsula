const express = require('express');
const cors = require('cors');
const fs = require('fs');
const { Telegraf } = require('telegraf');
const axios = require('axios');

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = "8188912825:AAEEq8lTj3R_a0lx6OKPyt59Nc_jv04GRxs";
const ADMIN_CHAT_ID = "6533586308"; // <-- –ø–æ–ø—Ä–∞–≤—å —ç—Ç–æ –ø–æ—Å–ª–µ —à–∞–≥–∞ –Ω–∏–∂–µ

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const BOOKINGS_FILE = 'bookings.json';
const PENDING_FILE = 'pending_bookings.json';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
function loadBookings() {
    try {
        return JSON.parse(fs.readFileSync(BOOKINGS_FILE));
    } catch (e) {
        return {};
    }
}

function saveBookings(bookings) {
    fs.writeFileSync(BOOKINGS_FILE, JSON.stringify(bookings, null, 2));
}

function loadPending() {
    try {
        return JSON.parse(fs.readFileSync(PENDING_FILE));
    } catch (e) {
        return [];
    }
}

function savePending(pending) {
    fs.writeFileSync(PENDING_FILE, JSON.stringify(pending, null, 2));
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
app.get('/api/bookedslots', (req, res) => {
    const room = req.query.room || '1'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π —Ä—É–º
    const bookings = loadBookings();
    let result = {};

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä—É–º–∞
    Object.values(bookings).forEach(userBookings => {
        if (!Array.isArray(userBookings)) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å chatid

        userBookings.forEach(booking => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É —Ä—É–º—É
            if (!booking.room || String(booking.room) === String(room)) {
                if (!result[booking.date]) result[booking.date] = [];
                booking.hours.forEach(hour => {
                    if (!result[booking.date].includes(hour)) {
                        result[booking.date].push(hour);
                    }
                });
            }
        });
    });

    res.json(result);
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
app.post('/api/bookings', (req, res) => {
    const {date, hours, customer, username, totalprice, room} = req.body;
    const pending = loadPending();

    // –ù–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π ID - —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const id = pending.length ? Math.max(...pending.map(b => b.id)) + 1 : 1;

    const newBooking = {id, date, hours, customer, username, totalprice, room};

    pending.push(newBooking);
    savePending(pending);

    notifyAdmin(newBooking);
    notifyCustomer(username, date, hours, totalprice);

    res.json({status: 'OK', bookingId: id});
});

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function notifyAdmin({id, date, hours, customer, username, totalprice, room}) {
    const roomText = room ? `\n–ó–∞–ª: ${room}` : '';
    const txt = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${id}\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(', ')}\n–ö–ª–∏–µ–Ω—Ç: ${customer}\nUsername: ${username}${roomText}\n–°—É–º–º–∞: ${totalprice}—Ä—É–±\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n/approve_${id}\n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π:\n/cancel_${id}`;

    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: ADMIN_CHAT_ID,
        text: txt
    })
    .then(() => console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
    .catch(() => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'));
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
function notifyCustomer(username, date, hours, totalprice) {
    const bookings = loadBookings();
    const userInfo = bookings[username];
    const chatid = userInfo ? userInfo.chatid : null;

    if (!chatid) {
        console.log(`–ù–µ—Ç chatid –¥–ª—è ${username}. –ü—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start`);
        return;
    }

    const txt = `üéØ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(', ')}\n–ö –æ–ø–ª–∞—Ç–µ: ${totalprice} —Ä—É–±\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Ç–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: chatid,
        text: txt
    })
    .then(() => console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
    .catch(() => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É'));
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
function notifyApprovedCustomer(booking) {
    const bookings = loadBookings();
    const userInfo = bookings[booking.username];
    const chatid = userInfo ? userInfo.chatid : null;

    if (!chatid) {
        console.log(`–ù–µ—Ç chatid –¥–ª—è ${booking.username}. –ü—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start`);
        return;
    }

    const roomText = booking.room ? `\n–ó–∞–ª: ${booking.room}` : '';
    const txt = `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: ${booking.id}\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.hours.join(', ')}${roomText}`;

    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: chatid,
        text: txt
    })
    .then(() => console.log('–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É', err));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
const bot = new Telegraf(BOT_TOKEN);

bot.start(ctx => {
    const username = ctx.from.username;
    const chatid = ctx.chat.id;

    let bookings = loadBookings() || {};

    // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ chat_id, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª
    if (!bookings[username]) {
        bookings[username] = { chatid };
    } else {
        bookings[username].chatid = chatid;
    }

    saveBookings(bookings);

    ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –í–∞—à chat_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
bot.command('approve', ctx => {
    if (String(ctx.message.chat.id) !== String(ADMIN_CHAT_ID)) {
        return ctx.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º _ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    const id = Number(ctx.message.text.split('_')[1]);
    let pending = loadPending();
    const booking = pending.find(b => b.id === id);
    if (!booking) return ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    let bookings = loadBookings();

    // –ù–æ–≤—ã–π id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏
    const bookingId = bookings[booking.username] && Array.isArray(bookings[booking.username]) ? 
                      Math.max(...bookings[booking.username].map(b => b.id || 0), 0) + 1 : 1;

    if (!bookings[booking.username] || !Array.isArray(bookings[booking.username])) {
        const chatid = bookings[booking.username] ? bookings[booking.username].chatid : null;
        bookings[booking.username] = [];
        if (chatid) bookings[booking.username].chatid = chatid;
    }

    bookings[booking.username].push({
        id: bookingId,
        date: booking.date,
        hours: booking.hours,
        customer: booking.customer,
        totalprice: booking.totalprice,
        room: booking.room
    });

    saveBookings(bookings);
    savePending(pending.filter(b => b.id !== id));

    notifyApprovedCustomer(booking);
    ctx.reply(`–ó–∞—è–≤–∫–∞ ${bookingId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞—é—â–µ–π –∑–∞—è–≤–∫–∏
bot.command('cancel', ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º _ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    const id = Number(ctx.message.text.split('_')[1]);
    let pending = loadPending();
    const booking = pending.find(b => b.id === id);

    if (booking) {
        pending = pending.filter(b => b.id !== id);
        savePending(pending);
        ctx.reply(`–ó–∞—è–≤–∫–∞ ${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏)`);
        return;
    }

    const bookings = loadBookings();
    let found = false;

    for (let username in bookings) {
        if (Array.isArray(bookings[username])) {
            const bookingIndex = bookings[username].findIndex(b => b.id === id);
            if (bookingIndex !== -1) {
                bookings[username].splice(bookingIndex, 1);
                found = true;
                saveBookings(bookings);
                break;
            }
        }
    }

    found ? 
        ctx.reply(`–ó–∞—è–≤–∫–∞ ${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞)`) : 
        ctx.reply(`–ó–∞—è–≤–∫–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
bot.command('remove', ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º _ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    const id = Number(ctx.message.text.split('_')[1]);
    let bookings = loadBookings();
    let found = false;

    for (let username in bookings) {
        if (Array.isArray(bookings[username])) {
            const bookingIndex = bookings[username].findIndex(b => b.id === id);
            if (bookingIndex !== -1) {
                bookings[username].splice(bookingIndex, 1);
                found = true;
                saveBookings(bookings);
                break;
            }
        }
    }

    found ? 
        ctx.reply(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ ${id} —É–¥–∞–ª–µ–Ω–∞`) : 
        ctx.reply(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
});

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.use(Telegraf.log());

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞
app.use(bot.webhookCallback('/api/bot')); // –ø—É—Ç—å –¥–ª—è webhook –±—É–¥–µ—Ç –≤–∞—à–¥–æ–º–µ–Ω/api/bot

// –ó–∞–ø—É—Å–∫–∞–µ–º express —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
    console.log(`App running on port ${PORT}`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ Telegram —è–≤–Ω–æ
    const webhookUrl = `https://drumfitness.ru/api/bot`; // –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –≤–∞—à HTTPS-–¥–æ–º–µ–Ω
    bot.telegram.setWebhook(webhookUrl)
        .then(() => console.log(`Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`))
        .catch(err => console.error('Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', err));
});