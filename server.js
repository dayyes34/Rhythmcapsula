// npm install express cors axios telegraf
const express = require('express');
const fs = require('fs');
const cors = require('cors');
const { Telegraf } = require('telegraf');

const app = express();
app.use(express.json());
app.use(cors());

const BOT_TOKEN = '8188912825:AAEEq8lTj3R_a0lx6OKPyt59Nc_jv04GRxs';
const ADMIN_CHAT_ID = '6533586308';

const BOOKINGS_FILE = 'bookings.json';
const PENDING_FILE = 'pending-bookings.json';

const bot = new Telegraf(BOT_TOKEN);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
const readJSON = file => fs.existsSync(file) ? JSON.parse(fs.readFileSync(file)) : [];
const writeJSON = (file, data) => fs.writeFileSync(file, JSON.stringify(data, null, 2));

// —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
const sendTelegram = async (chat_id, text) => {
    try {
        await bot.telegram.sendMessage(chat_id, text);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e.message);
    }
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω—É –∏ –ö–ª–∏–µ–Ω—Ç—É
const notifyAdmin = booking => sendTelegram(ADMIN_CHAT_ID, `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${booking.id}\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.hours.join(', ')}\n–ö–ª–∏–µ–Ω—Ç: ${booking.customer}\nUsername: ${booking.username}\n–°—É–º–º–∞: ${booking.totalprice}\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /approve ${booking.id}\n‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: /cancel ${booking.id}`);
const notifyCustomer = booking => sendTelegram(booking.username, `‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\nüìÖ ${booking.date}\nüïí ${booking.hours.join(', ')}\nüí≥ –°—É–º–º–∞: ${booking.totalprice} —Ä—É–±\n\n(–∑–¥–µ—Å—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã)`);
const notifyApprovedCustomer = booking => sendTelegram(booking.username, `‚úÖüéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüìÖ ${booking.date}\nüïí ${booking.hours.join(', ')}`);

// API –º–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏
app.post('/api/bookings', (req, res) => {
    const { date, hours, customer, username, totalprice } = req.body;
    const pending = readJSON(PENDING_FILE);
    const id = pending.length ? Math.max(...pending.map(p => p.id)) + 1 : 1;
    const booking = { id, date, hours, customer, username, totalprice };
    pending.push(booking);
    writeJSON(PENDING_FILE, pending);
    notifyAdmin(booking);
    notifyCustomer(booking);
    res.json({ status: 'OK', bookingId: id });
});

// API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π
app.get('/api/bookings', (req, res) => res.json(readJSON(BOOKINGS_FILE)));

// –∫–æ–º–∞–Ω–¥—ã telegram
bot.start(ctx => ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫.'));

bot.command('approve', ctx => {
    if (String(ctx.chat.id) !== ADMIN_CHAT_ID) return ctx.reply('‚õîÔ∏è –ù–µ –∞–¥–º–∏–Ω!');
    const id = Number(ctx.message.text.split(' ')[1]);
    const pending = readJSON(PENDING_FILE);
    const idx = pending.findIndex(p => p.id === id);
    if (idx === -1) return ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

    const [booking] = pending.splice(idx, 1);
    const bookings = readJSON(BOOKINGS_FILE);
    bookings.push(booking);
    writeJSON(BOOKINGS_FILE, bookings);
    writeJSON(PENDING_FILE, pending);

    notifyApprovedCustomer(booking);
    ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);
});

bot.command('cancel', ctx => {
    if (String(ctx.chat.id) !== ADMIN_CHAT_ID) return ctx.reply('‚õîÔ∏è –ù–µ –∞–¥–º–∏–Ω!');
    const id = Number(ctx.message.text.split(' ')[1]);
    let pending = readJSON(PENDING_FILE);
    const lengthBefore = pending.length;
    pending = pending.filter(p => p.id !== id);
    if (pending.length !== lengthBefore) {
        writeJSON(PENDING_FILE, pending);
        return ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
    }
    ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
});

bot.command('remove', ctx => {
    if (String(ctx.chat.id) !== ADMIN_CHAT_ID) return ctx.reply('‚õîÔ∏è –ù–µ –∞–¥–º–∏–Ω!');
    const id = Number(ctx.message.text.split(' ')[1]);
    let bookings = readJSON(BOOKINGS_FILE);
    const lengthBefore = bookings.length;
    bookings = bookings.filter(b => b.id !== id);
    if (bookings.length !== lengthBefore) {
        writeJSON(BOOKINGS_FILE, bookings);
        return ctx.reply(`üóë –ó–∞—è–≤–∫–∞ #${id} —É–¥–∞–ª–µ–Ω–∞.`);
    }
    ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
});

// webhook endpoint
app.use(bot.webhookCallback('/bot'));

// —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç
app.listen(3000, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000`);
    const url = 'https://drumfitness.ru/bot'; // —É–±–µ–¥–∏—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    await bot.telegram.setWebhook(url)
        .then(() => console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${url}`))
        .catch(e => console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:`, e));
});
