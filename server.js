// –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–∞–∫–µ—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:
// npm install express cors axios uuid telegraf

const express = require('express');
const fs = require('fs');
const cors = require('cors');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const { Telegraf } = require('telegraf');

// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—É–∫–∞–∂–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
const BOT_TOKEN = '8188912825:AAEEq8lTj3R_a0lx6OKPyt59Nc_jv04GRxs';
const ADMIN_CHAT_ID = '6533586308';

const BOOKINGS_FILE = 'bookings.json';
const PENDING_FILE = 'pending-bookings.json';

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(cors());

// üî∑ Telegram bot init
const bot = new Telegraf(BOT_TOKEN);

// üóÉÔ∏è –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const loadJSON = file => fs.existsSync(file) ? JSON.parse(fs.readFileSync(file)) : [];
const saveJSON = (file, data) => fs.writeFileSync(file, JSON.stringify(data, null, 2));

const loadBookings = () => loadJSON(BOOKINGS_FILE);
const saveBookings = data => saveJSON(BOOKINGS_FILE, data);
const loadPending = () => loadJSON(PENDING_FILE);
const savePending = data => saveJSON(PENDING_FILE, data);

// üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
const sendTelegram = (chat_id, text) => {
    return axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, { chat_id, text })
        .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err.message));
};

function notifyAdmin(booking) {
    const txt = `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${booking.id}
–î–∞—Ç–∞: ${booking.date}
–í—Ä–µ–º—è: ${booking.hours.join(', ')}
–ö–ª–∏–µ–Ω—Ç: ${booking.customer}
Username: ${booking.username}
–°—É–º–º–∞: ${booking.totalprice} —Ä—É–±.

‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /approve ${booking.id}
‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: /cancel ${booking.id}`;

    return sendTelegram(ADMIN_CHAT_ID, txt);
}

function notifyCustomer(booking) {
    const txt = `‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!
–î–∞—Ç–∞: ${booking.date}
–í—Ä–µ–º—è: ${booking.hours.join(', ')}
–ö –æ–ø–ª–∞—Ç–µ: ${booking.totalprice} —Ä—É–±

üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
[—Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ç–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã]`;

    return sendTelegram(booking.username, txt);
}

function notifyApprovedCustomer(booking) {
    const txt = `üéâ‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!
–î–∞—Ç–∞: ${booking.date}
–í—Ä–µ–º—è: ${booking.hours.join(', ')}`;

    return sendTelegram(booking.username, txt);
}

// üåé API –º–∞—Ä—à—Ä—É—Ç—ã

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/api/bookings', (req, res) => res.json(loadBookings()));

// üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏)
app.post('/api/bookings', (req, res) => {
    const { date, hours, customer, username, totalprice } = req.body;
    const pending = loadPending();

    const id = pending.length ? Math.max(...pending.map(b => b.id)) + 1 : 1;
    const booking = { id, date, hours, customer, username, totalprice };

    pending.push(booking);
    savePending(pending);

    notifyAdmin(booking);
    notifyCustomer(booking);

    res.json({ status: 'OK', bookingId: id });
});

// ü§ñ Telegram –∫–æ–º–∞–Ω–¥—ã

// ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.start(ctx => ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö.'));

// üîë Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
bot.use((ctx, next) => {
    if(ctx.message && ['/approve', '/cancel', '/remove'].includes(ctx.message.text.split(' ')[0])) {
        if(String(ctx.message.chat.id) !== ADMIN_CHAT_ID) return ctx.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!');
    }
    return next();
});

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
bot.command('approve', ctx => {
    const id = Number(ctx.message.text.split(' ')[1]);
    let pending = loadPending();
    const booking = pending.find(b => b.id === id);

    if (!booking) return ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö.');

    pending = pending.filter(b => b.id !== id);
    savePending(pending);

    const bookings = loadBookings();
    bookings.push(booking);
    saveBookings(bookings);

    notifyApprovedCustomer(booking);
    ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);
});

// ‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
bot.command('cancel', ctx => {
    const id = Number(ctx.message.text.split(' ')[1]);

    let pending = loadPending();
    const initialPending = pending.length;
    pending = pending.filter(b => b.id !== id);

    if (pending.length !== initialPending) {
        savePending(pending);
        return ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏).`);
    }

    let bookings = loadBookings();
    const initialBookings = bookings.length;
    bookings = bookings.filter(b => b.id !== id);

    if (bookings.length !== initialBookings) {
        saveBookings(bookings);
        return ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ (–±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞).`);
    }

    ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
});

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
bot.command('remove', ctx => {
    const id = Number(ctx.message.text.split(' ')[1]);
    let bookings = loadBookings();
    const initialBookings = bookings.length;

    bookings = bookings.filter(b => b.id !== id);
    if(bookings.length === initialBookings) return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

    saveBookings(bookings);
    ctx.reply(`üóëÔ∏è –ó–∞—è–≤–∫–∞ #${id} —É–¥–∞–ª–µ–Ω–∞.`);
});

// üõ∞Ô∏è Webhook –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.use(bot.webhookCallback('/bot'));

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    const WEBHOOK_URL = 'https://drumfitness.ru/bot';  // —É–∫–∞–∂–∏ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ HTTPS!
    bot.telegram.setWebhook(WEBHOOK_URL)
        .then(() => console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`))
        .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ webhook', err));
});
