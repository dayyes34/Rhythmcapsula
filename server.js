// –°–ù–ê–ß–ê–õ–ê –£–°–¢–ê–ù–û–í–ò –ü–ê–ö–ï–¢–´ —á–µ—Ä–µ–∑ npm:
// npm install express cors axios uuid telegraf

// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
const express = require('express');
const fs = require('fs');
const cors = require('cors');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const { Telegraf } = require('telegraf');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const app = express();
const PORT = 3000;
app.use(express.json());
app.use(cors());

// üî¥ –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
const BOT_TOKEN = '8188912825:AAEEq8lTj3R_a0lx6OKPyt59Nc_jv04GRxs'; // —Ç—É—Ç –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
const ADMIN_CHAT_ID = '533586308'; // —Ç—É—Ç –≤—Å—Ç–∞–≤—å ID –∞–¥–º–∏–Ω–∞

// –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö (–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
const BOOKINGS_FILE = 'bookings.json';
const PENDING_FILE = 'pending-bookings.json';

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const loadBookings = () => fs.existsSync(BOOKINGS_FILE) ? JSON.parse(fs.readFileSync(BOOKINGS_FILE)) : [];
const saveBookings = bookings => fs.writeFileSync(BOOKINGS_FILE, JSON.stringify(bookings, null, 2));

const loadPending = () => fs.existsSync(PENDING_FILE) ? JSON.parse(fs.readFileSync(PENDING_FILE)) : [];
const savePending = pending => fs.writeFileSync(PENDING_FILE, JSON.stringify(pending, null, 2));

// API: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
app.get('/api/bookings', (req, res) => {
  res.json(loadBookings());
});

// API: —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
app.post('/api/bookings', (req, res) => {
  const { date, hours, customer, username, totalprice } = req.body;
  const pending = loadPending();
  const id = pending.length ? Math.max(...pending.map(b => b.id)) + 1 : 1;
  const booking = { id, date, hours, customer, username, totalprice };
  pending.push(booking);
  savePending(pending);
  notifyAdmin(booking);
  notifyCustomer(booking);
  res.json({ status: 'OK', bookingId: id });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(ctx => ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞—è–≤–∫–∞—Ö."));

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
const notifyAdmin = (booking) => {
  const txt = `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${booking.id}\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.hours.join(", ")}\n–ö–ª–∏–µ–Ω—Ç: ${booking.customer}\nUsername: ${booking.username}\n–°—É–º–º–∞: ${booking.totalprice} —Ä—É–±\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /approve ${booking.id}\n‚ùå –û—Ç–º–µ–Ω–∞: /cancel ${booking.id}`;
  axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, { chat_id: ADMIN_CHAT_ID, text: txt });
};

const notifyCustomer = (booking) => {
  const txt = `‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.hours.join(", ")}\n–ò—Ç–æ–≥–æ: ${booking.totalprice} —Ä—É–±.\n\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: [—Å—é–¥–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã]`;
  axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, { chat_id: booking.username, text: txt })
  .catch(() => console.log("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª /start –±–æ—Ç—É."));
};

const notifyApprovedCustomer = (booking) => {
  const txt = `‚úÖüéâ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–î–∞—Ç–∞: ${booking.date}\n–í—Ä–µ–º—è: ${booking.hours.join(", ")}`;
  axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, { chat_id: booking.username, text: txt });
};

// –ö–æ–º–∞–Ω–¥–∞ approve
bot.command('approve', ctx => {
  if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID)
    return ctx.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!');
  const id = Number(ctx.message.text.split(' ')[1]);
  let pending = loadPending();
  const booking = pending.find(b => b.id === id);
  if (!booking) return ctx.reply("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
  pending = pending.filter(b => b.id !== id);
  savePending(pending);
  const bookings = loadBookings();
  bookings.push(booking);
  saveBookings(bookings);
  notifyApprovedCustomer(booking);
  ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${booking.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);
});

// –ö–æ–º–∞–Ω–¥–∞ cancel
bot.command('cancel', ctx => {
  if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID)
    return ctx.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!');
  const id = Number(ctx.message.text.split(' ')[1]);
  let pending = loadPending();
  pending = pending.filter(b => b.id !== id);
  savePending(pending);
  ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
});

// –ö–æ–º–∞–Ω–¥–∞ remove
bot.command('remove', ctx => {
  if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID)
    return ctx.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!');
  const id = Number(ctx.message.text.split(' ')[1]);
  let bookings = loadBookings();
  bookings = bookings.filter(b => b.id !== id);
  saveBookings(bookings);
  ctx.reply(`üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #${id} —É–¥–∞–ª–µ–Ω–∞.`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–µ —á–µ—Ä–µ–∑ webhook
app.use(bot.webhookCallback('/bot'));
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  bot.telegram.setWebhook(`https://drumfitness.ru/bot`)
    .then(() => console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))
    .catch(console.error);
});
