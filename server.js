// üìå –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú –£–°–¢–ê–ù–û–í–ò –ü–ê–ö–ï–¢–´
// npm install express cors axios uuid telegraf

const express = require("express");
const fs = require("fs");
const cors = require("cors");
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const { Telegraf } = require("telegraf");

const app = express();
const PORT = 3000;
app.use(express.json());
app.use(cors());

// üìå –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ Telegram –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
const BOT_TOKEN = "8188912825:AAEEq8lTj3R_a0lx6OKPyt59Nc_jv04GRxs";
const ADMIN_CHAT_ID = "6533586308"; // <-- –ø–æ–ø—Ä–∞–≤—å —ç—Ç–æ –ø–æ—Å–ª–µ —à–∞–≥–∞ –Ω–∏–∂–µ

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const BOOKINGS_FILE = "./bookings.json";
const PENDING_FILE = "./pending_bookings.json";

// –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
function loadBookings() {
    if (fs.existsSync(BOOKINGS_FILE))
        return JSON.parse(fs.readFileSync(BOOKINGS_FILE));
    return {};
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
function saveBookings(bookings) {
    fs.writeFileSync(BOOKINGS_FILE, JSON.stringify(bookings, null, 2));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
function loadPending() {
    return fs.existsSync(PENDING_FILE) ? JSON.parse(fs.readFileSync(PENDING_FILE)) : [];
}
function savePending(pending) {
    fs.writeFileSync(PENDING_FILE, JSON.stringify(pending, null, 2));
}

// üö© API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
app.get("/api/bookings", (req, res) => {
    res.json(loadBookings());
});

// üö© API: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
app.post("/api/bookings", (req, res) => {
    const {date, hours, customer, username, total_price} = req.body;
    const pending = loadPending();
    const id = uuidv4().slice(0, 8);

    const newBooking = {id, date, hours, customer, username, total_price};

    pending.push(newBooking);
    savePending(pending);

    notifyAdmin(newBooking);
    notifyCustomer(newBooking);

    res.json({status: "OK", bookingId: id});
});

// üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
function notifyAdmin({id, date, hours, customer, username, total_price}) {
    const txt = `üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${id}\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(", ")}\n–ö–ª–∏–µ–Ω—Ç: ${customer}\nUsername: @${username}\n–°—É–º–º–∞: ${total_price}—Ä—É–±.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n/approve ${id}`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: ADMIN_CHAT_ID,
        text: txt
    }).then(() => console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")).catch(console.error);
}

// üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
function notifyCustomer({username, date, hours, total_price}) {
    const txt = `‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(", ")}\n–ö –æ–ø–ª–∞—Ç–µ: ${total_price} —Ä—É–±.\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Ç–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: `@${username}`,
        text: txt
    }).then(() => console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")).catch(() => console.log("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É (–ø—É—Å—Ç—å –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É /start)"));
}

// üî∑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
const bot = new Telegraf(BOT_TOKEN);

bot.command("approve", ctx => {
    if (String(ctx.message.chat.id) !== ADMIN_CHAT_ID) {
        return ctx.reply("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!");
    }

    const id = ctx.message.text.split(" ")[1];
    const pending = loadPending();
    const booking = pending.find(b => b.id === id);

    if (!booking) return ctx.reply("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");

    const bookings = loadBookings();
    if (!bookings[booking.date]) bookings[booking.date] = [];
    bookings[booking.date].push(...booking.hours);
    saveBookings(bookings);

    savePending(pending.filter(b => b.id !== id));

    notifyApprovedCustomer(booking);
    ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`);
});

// –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
function notifyApprovedCustomer({username, date, hours}) {
    const txt = `üéâ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n–î–∞—Ç–∞: ${date}\n–í—Ä–µ–º—è: ${hours.join(", ")}`;
    axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: `@${username}`,
        text: txt
    }).then(console.log).catch(console.error);
}

// üî∑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
bot.launch();
app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: –ø–æ—Ä—Ç ${PORT}`));
